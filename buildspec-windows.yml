# Windows専用 buildspec for CodeBuild
# Windows Server 2022 Container環境でのDockerイメージビルド

version: 0.2

phases:
  env:
    shell: powershell
  pre_build:
    commands:
      - echo "Build started on $(Get-Date)"
      - echo "Windows Version:"
      - Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, OsHardwareAbstractionLayer
      - echo "Logging in to Amazon ECR..."
      - aws --version
      - echo "Debug Environment variables:"
      - echo "AWS_ACCOUNT_ID=$env:AWS_ACCOUNT_ID"
      - echo "REPOSITORY_URI=$env:REPOSITORY_URI"
      - echo "AWS_DEFAULT_REGION=$env:AWS_DEFAULT_REGION"
      - echo "CODEBUILD_RESOLVED_SOURCE_VERSION=$env:CODEBUILD_RESOLVED_SOURCE_VERSION"
      - echo "Logging in to ECR..."
      - aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin "$env:AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com"
      - echo "ECR login completed"
      - $env:IMAGE_TAG = $env:CODEBUILD_RESOLVED_SOURCE_VERSION.Substring(0, 7)
      - echo "Image tag will be $env:IMAGE_TAG"
      
  build:
    commands:
      - echo "Build phase started on $(Get-Date)"
      - echo "Building Windows Docker image..."
      - echo "Current directory:"
      - Get-ChildItem
      - echo "Checking execution directory:"
      - Get-ChildItem -Path execution
      - echo "Using pre-built countdown.exe..."
      - Set-Location -Path execution
      - |
        if (-not (Test-Path -Path "countdown.exe")) {
            echo "Error: countdown.exe not found!"
            exit 1
        }
      - echo "countdown.exe found, copying to image directory..."
      - Copy-Item -Path "countdown.exe" -Destination "..\image\"
      - Set-Location -Path "..\image"
      - echo "Building Docker image..."
      - docker build -t "$env:REPOSITORY_URI`:latest" .
      - docker build -t "$env:REPOSITORY_URI`:$env:IMAGE_TAG" .
      - echo "Build completed on $(Get-Date)"
      
  post_build:
    commands:
      - echo "Post build phase started on $(Get-Date)"
      - echo "Pushing Docker images to ECR..."
      - docker push "$env:REPOSITORY_URI`:latest"
      - docker push "$env:REPOSITORY_URI`:$env:IMAGE_TAG"
      - echo "Creating image definitions file..."
      - |
        $imageDefinition = @"
        [{"name":"countdown-container","imageUri":"$env:REPOSITORY_URI`:$env:IMAGE_TAG"}]
        "@
        Set-Content -Path imagedefinitions.json -Value $imageDefinition
      - echo "Image definitions file created:"
      - Get-Content -Path imagedefinitions.json
      - echo "Post build completed on $(Get-Date)"

artifacts:
  files:
    - imagedefinitions.json
    - '**/*'
  name: BuildArtifact
